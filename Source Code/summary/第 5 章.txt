第五章	单体模式

将代码组织成一个逻辑单元
单体创建的命名空间可以清除全局变量
广义： 用来划分命名空间并将一批有一定关联的方法和属性组织在一起的对象

5.1 单体的基本结构

	对象字面量是创建单体方法之一
	一个对象字面量，把一批有一定关联的方法和属性组织在一起

5.2 划分命名空间

	在js中什么都可以被改写，命名空间可以某种程度解决js对象易变性和灵活性
	
5.3 用作特定网页专用代码的包装器的单体

	创建init方法将其关联大窗口的load事件中，将所有初始化代码组织到一个地方
	
5.4 拥有私有成员的单体

	
5.5 惰性实例化
	
	惰性加载 : 单体对象都是在脚本加载时被创建出来。
	对于资源密集型的或者配置开销很大的单体，更合理的做法是将其实例化推迟到需要使用的时候。
	
5.6 分支

	把浏览器的差异封装到在运行期间进行设置的动态方法中
	js能够在运行时动态确定函数代码
	
5.7 示例： 用分支技术创建XHR对象

5.8	单体模式使用场合

	1.定义命名空间
	2.可以把那些开销较大却很少使用的组件包装到  **惰性加载单体**中
	3.对于特定环境的代码可以被包装到 **分支型单体** 中（eg：5.7 ）

5.9 单体模式之利
	
	

	
	


